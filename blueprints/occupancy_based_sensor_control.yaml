blueprint:
  name: Occupancy-Based On/Off Control with Optional Off-Delay & Darkness Sensor
  description: >
    Turns on selected entities when an occupancy helper goes on,
    and turns them off when it goes off, optionally after a delay.
    If a binary_sensor is provided as a darkness condition, entities will turn on only when it's dark.
    Works with any entity supporting turn_on/turn_off services.
  domain: automation

  input:
    occupancy_boolean:
      name: Occupancy Helper
      selector:
        entity:
          domain: input_boolean

    entities_to_control:
      name: Entities to Control
      description: Any on/off entity (light, switch, input_boolean, etc.)
      selector:
        entity:
          multiple: true

    off_delay:
      name: Delay After Occupancy Off
      description: How long to wait before turning off entities
      default:
        seconds: 0
      selector:
        duration: {}

    dark_sensor:
      name: Darkness Condition Sensor (Optional)
      description: Only activate entities if this binary_sensor is "on" (i.e. dark detected)
      default: null
      selector:
        entity:
          domain: binary_sensor

trigger:
  - id: occupied
    platform: state
    entity_id: !input occupancy_boolean
    to: "on"

  - id: vacant
    platform: state
    entity_id: !input occupancy_boolean
    to: "off"

variables:
  occ_flag: !input occupancy_boolean
  targets: !input entities_to_control
  darkness_sensor: !input dark_sensor

action:
  - choose:
      # Turn entities ON when occupancy turns ON, optionally gated by darkness sensor
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'on' }}"
        sequence:
          - choose:
              # If dark sensor is provided, only continue if it's "on"
              - conditions:
                  - condition: template
                    value_template: >-
                      {{ darkness_sensor is not none and is_state(darkness_sensor, 'on') }}
                sequence:
                  - service: homeassistant.turn_on
                    target:
                      entity_id: "{{ targets }}"
              # If dark sensor not provided, skip check
              - conditions:
                  - condition: template
                    value_template: "{{ darkness_sensor is none }}"
                sequence:
                  - service: homeassistant.turn_on
                    target:
                      entity_id: "{{ targets }}"

      # Turn entities OFF when occupancy turns OFF, optionally delayed
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'off' }}"
        sequence:
          - delay: !input off_delay
          - service: homeassistant.turn_off
            target:
              entity_id: "{{ targets }}"
mode: restart
